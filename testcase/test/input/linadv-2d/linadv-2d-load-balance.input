// 
// 文件名:	test-2d.input
// 软件包:	JAUMIN application
// 版权  :	(c) 2004-2010 北京应用物理与计算数学研究所
// 版本号:	$Revision: 96 $
// 修改  :	$Date: 2011-05-30 10:29:13 +0800 (一, 2011-05-30) $
// 描述  :	输入文件:JAUMIN-LinAdvSL实例.
//

Main{
   // 日志文件参数.
   log_file_name               = "2d-Rec.log"               // 日志文件名称.
   log_all_nodes               = TRUE                       // TRUE表示每个进程生成一个日志文件.

   // 可视化数据场的输出参数.
   javis_dump_interval         = 1                          // 输出时间步的间隔. 0表示关闭.
   javis_dump_dirname          = "javis_test2d_Rectangle"   // 存储数据场的目录名.
   javis_number_procs_per_file = 1                          // 多少个进程共享一个输出文件.

   // 重启动控制参数.
   restart_dump_interval       = 0                          // 重启动时间步的间隔. 0表示关闭.
   restart_dump_dirname        = "restart_test2d-rectangle" // 存储重启动数据场的目录名.
}

LinAdv {
   constant_x_velocity = 0.1	
}

GridGeometry {

    MeshImportationParameter{
       //file_name = "rectng_50x10.k"
       file_name = "rectng_500x100.k"
       //file_name = "rectng_6x2.k"
       refine_times = 0
    }
}

GridTopology {
}

HierarchyTimeIntegrator{

   // 时间步进控制参数
   start_time           = 0.e0       // 模拟的初始时刻.
   end_time             = 300.0      // 模拟的终止时刻.
   max_integrator_steps = 30         // 模拟的最大时间步数.
   max_dt               = 1.0        // 最大时间步步长.
   grow_dt              = 1.2        // 连续两个时间步长的最大放大倍数.

   // 负载平衡数据库
   LoadBalancer {
     load_balance_log = TRUE     // TRUE表示输出负载平衡信息到日志；
                                 // FALSE表示不输出；缺省为FALSE；

     noInitBalance {
       LoadModeling {
           UserLoad {
               num_of_constraint = 1  // 用户自定义负载类型的约束个数；
           }
       }
       Partition {
           partition_method= "GRAPH"  // 剖分算法
       }
     }
   
     Rebalance {
       LoadModeling {
           ComputingLoad {
               num_of_computing_stage = 2   //  这是一个两阶段计算负载。
               computing_stage_0 = "COMPUTE_FLUX"  // 第一阶段的负载由名字为 COMPUTE_FLUX 的构件决定。
               computing_stage_1 =  "CONSER_DIFF" // 第二阶段的负载由名字为 CONSER_DIFF 的构件决定。
           }
       }
       Decision {
           load_balance_start = 1 // 从第1步开始负载平衡。
           load_balance_stop = 50 // 第50之后不再做负载平衡
           load_balance_interval = 10    //  每隔10步执行负载剖分。
           load_balance_threshold = 0.8  //  如果当前的LBE<0.8，执行负载迁移。
       }
       Repartition {
           partition_method= "GRAPH"  // 重剖分算法
       }
     }
   }

   GriddingAlgorithm{
     patch_size =  250                // 网格片大小, 即包含的网格单元数目.
   }
}

JaVisDataWriter{
}

TimerManager{
   timer_list   = "*::*::*"
   print_summed = TRUE
   print_max    = TRUE
}

